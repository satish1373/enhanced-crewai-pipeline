
# JavaScript Solution Generated by Senior JavaScript Developer

```javascript
// solution.js
const express = require('express');
const app = express();
const port = process.env.PORT || 3000;

app.use(express.json());

class SolutionHandler {
    constructor() {
        this.createdAt = new Date();
    }
    
    process(data) {
        console.log('Processing data:', data);
        return {
            status: 'success',
            data: data,
            timestamp: this.createdAt.toISOString()
        };
    }
    
    validateInput(data) {
        if (!data) {
            throw new Error('Data cannot be empty');
        }
        return true;
    }
}

const handler = new SolutionHandler();

app.get('/api/health', (req, res) => {
    res.json({ status: 'healthy', timestamp: new Date().toISOString() });
});

app.post('/api/process', (req, res) => {
    try {
        const result = handler.process(req.body);
        res.json(result);
    } catch (error) {
        res.status(400).json({ error: error.message });
    }
});

app.listen(port, () => {
    console.log(`Server running on port ${port}`);
});

module.exports = { SolutionHandler };
```

```javascript
// test/solution.test.js
const { SolutionHandler } = require('../solution');

describe('SolutionHandler', () => {
    let handler;
    
    beforeEach(() => {
        handler = new SolutionHandler();
    });
    
    test('should process data successfully', () => {
        const result = handler.process('test data');
        expect(result.status).toBe('success');
        expect(result.data).toBe('test data');
    });
    
    test('should validate input correctly', () => {
        expect(handler.validateInput('valid')).toBe(true);
        expect(() => handler.validateInput('')).toThrow('Data cannot be empty');
    });
});
```

```json
{
  "name": "solution",
  "version": "1.0.0",
  "description": "AI-generated solution",
  "main": "solution.js",
  "scripts": {
    "start": "node solution.js",
    "test": "jest",
    "dev": "nodemon solution.js"
  },
  "dependencies": {
    "express": "^4.18.0"
  },
  "devDependencies": {
    "jest": "^29.0.0",
    "nodemon": "^2.0.0"
  }
}
```

## Installation
1. Install dependencies: `npm install`
2. Start server: `npm start`
3. Run tests: `npm test`
