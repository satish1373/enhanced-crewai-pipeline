#!/usr/bin/env python3
"""
Enhanced CrewAI Multi-Language Automation Pipeline
Integrated with comprehensive ticket tracking and code storage
"""

import os
import time
import json
from datetime import datetime
from jira import JIRA
from enhanced_ticket_tracking import EnhancedTicketTracker, SmartTicketProcessor
from code_storage_system import CodeStorageManager

# -------------------- Configuration --------------------
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN") 
GITHUB_REPO = os.getenv("GITHUB_REPO")
SLACK_WEBHOOK_URL = os.getenv("SLACK_WEBHOOK_URL")
JIRA_HOST = os.getenv("JIRA_HOST")
JIRA_EMAIL = os.getenv("JIRA_EMAIL")
JIRA_API_TOKEN = os.getenv("JIRA_API_TOKEN")
JIRA_PROJECT_KEY = os.getenv("JIRA_PROJECT_KEY")
POLL_INTERVAL = int(os.getenv("POLL_INTERVAL", "60"))

# -------------------- Initialize Systems --------------------
try:
    # Initialize Code Storage System
    code_storage = CodeStorageManager("generated_solutions")
    print("✅ Code storage system initialized")
    
    # Initialize JIRA connection
    if JIRA_HOST and JIRA_EMAIL and JIRA_API_TOKEN:
        # Fix JIRA_HOST URL if it's missing the scheme
        jira_url = JIRA_HOST
        if not jira_url.startswith(('http://', 'https://')):
            jira_url = f"https://{jira_url}"
        
        print(f"🔗 Connecting to JIRA: {jira_url}")
        jira = JIRA(server=jira_url, basic_auth=(JIRA_EMAIL, JIRA_API_TOKEN))
        print("✅ JIRA connection established")
    else:
        print("⚠️  JIRA credentials not set - running in demo mode")
        jira = None
    
    # Initialize Enhanced Tracking
    enhanced_tracker = EnhancedTicketTracker(JIRA_PROJECT_KEY)
    smart_processor = SmartTicketProcessor(enhanced_tracker, jira, None)
    print("✅ Enhanced tracking initialized")
    
except Exception as e:
    print(f"❌ Initialization error: {e}")
    exit(1)

# -------------------- Agent Definitions (Simplified for Demo) --------------------
class MockAgent:
    """Mock CrewAI agent for demonstration"""
    def __init__(self, role, goal, backstory):
        self.role = role
        self.goal = goal
        self.backstory = backstory

class MockTask:
    """Mock CrewAI task for demonstration"""
    def __init__(self, description, agent, expected_output):
        self.description = description
        self.agent = agent
        self.expected_output = expected_output

class MockCrew:
    """Mock CrewAI crew for demonstration"""
    def __init__(self, agents, tasks, verbose=True):
        self.agents = agents
        self.tasks = tasks
        self.verbose = verbose
    
    def kickoff(self):
        """Simulate CrewAI execution - replace with real CrewAI when available"""
        task = self.tasks[0]
        agent = task.agent
        
        # Generate a realistic solution based on the task description
        if "python" in task.description.lower():
            return self._generate_python_solution(task.description)
        elif "javascript" in task.description.lower():
            return self._generate_javascript_solution(task.description)
        elif "java" in task.description.lower():
            return self._generate_java_solution(task.description)
        else:
            return self._generate_general_solution(task.description)
    
    def _generate_python_solution(self, description):
        """Generate a mock Python solution"""
        return f"""
# Python Solution Generated by {self.agents[0].role}

```python
# main.py
import os
import json
from datetime import datetime

class Solution:
    def __init__(self):
        self.created_at = datetime.now()
    
    def process(self, data):
        \"\"\"Main processing function\"\"\"
        print(f"Processing data: {{data}}")
        return {{"status": "success", "timestamp": self.created_at.isoformat()}}
    
    def validate_input(self, data):
        \"\"\"Validate input data\"\"\"
        if not data:
            raise ValueError("Data cannot be empty")
        return True

if __name__ == "__main__":
    solution = Solution()
    result = solution.process("sample data")
    print(json.dumps(result, indent=2))
```

```python
# test_solution.py
import unittest
from main import Solution

class TestSolution(unittest.TestCase):
    def setUp(self):
        self.solution = Solution()
    
    def test_process(self):
        result = self.solution.process("test data")
        self.assertEqual(result["status"], "success")
        self.assertIn("timestamp", result)
    
    def test_validate_input_valid(self):
        self.assertTrue(self.solution.validate_input("valid data"))
    
    def test_validate_input_empty(self):
        with self.assertRaises(ValueError):
            self.solution.validate_input("")

if __name__ == "__main__":
    unittest.main()
```

```txt
# requirements.txt
python>=3.8
pytest>=7.0.0
```

## Installation
1. Install dependencies: `pip install -r requirements.txt`
2. Run the solution: `python main.py`
3. Run tests: `python -m pytest test_solution.py`

## Features
- Input validation
- Error handling
- Comprehensive testing
- Clean, maintainable code structure
"""
    
    def _generate_javascript_solution(self, description):
        """Generate a mock JavaScript solution"""
        return f"""
# JavaScript Solution Generated by {self.agents[0].role}

```javascript
// solution.js
const express = require('express');
const app = express();
const port = process.env.PORT || 3000;

app.use(express.json());

class SolutionHandler {{
    constructor() {{
        this.createdAt = new Date();
    }}
    
    process(data) {{
        console.log('Processing data:', data);
        return {{
            status: 'success',
            data: data,
            timestamp: this.createdAt.toISOString()
        }};
    }}
    
    validateInput(data) {{
        if (!data) {{
            throw new Error('Data cannot be empty');
        }}
        return true;
    }}
}}

const handler = new SolutionHandler();

app.get('/api/health', (req, res) => {{
    res.json({{ status: 'healthy', timestamp: new Date().toISOString() }});
}});

app.post('/api/process', (req, res) => {{
    try {{
        const result = handler.process(req.body);
        res.json(result);
    }} catch (error) {{
        res.status(400).json({{ error: error.message }});
    }}
}});

app.listen(port, () => {{
    console.log(`Server running on port ${{port}}`);
}});

module.exports = {{ SolutionHandler }};
```

```javascript
// test/solution.test.js
const {{ SolutionHandler }} = require('../solution');

describe('SolutionHandler', () => {{
    let handler;
    
    beforeEach(() => {{
        handler = new SolutionHandler();
    }});
    
    test('should process data successfully', () => {{
        const result = handler.process('test data');
        expect(result.status).toBe('success');
        expect(result.data).toBe('test data');
    }});
    
    test('should validate input correctly', () => {{
        expect(handler.validateInput('valid')).toBe(true);
        expect(() => handler.validateInput('')).toThrow('Data cannot be empty');
    }});
}});
```

```json
{{
  "name": "solution",
  "version": "1.0.0",
  "description": "AI-generated solution",
  "main": "solution.js",
  "scripts": {{
    "start": "node solution.js",
    "test": "jest",
    "dev": "nodemon solution.js"
  }},
  "dependencies": {{
    "express": "^4.18.0"
  }},
  "devDependencies": {{
    "jest": "^29.0.0",
    "nodemon": "^2.0.0"
  }}
}}
```

## Installation
1. Install dependencies: `npm install`
2. Start server: `npm start`
3. Run tests: `npm test`
"""
    
    def _generate_java_solution(self, description):
        """Generate a mock Java solution"""
        return f"""
# Java Solution Generated by {self.agents[0].role}

```java
// Solution.java
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;

public class Solution {{
    private LocalDateTime createdAt;
    
    public Solution() {{
        this.createdAt = LocalDateTime.now();
    }}
    
    public Map<String, Object> process(String data) {{
        System.out.println("Processing data: " + data);
        
        Map<String, Object> result = new HashMap<>();
        result.put("status", "success");
        result.put("data", data);
        result.put("timestamp", createdAt.toString());
        
        return result;
    }}
    
    public boolean validateInput(String data) {{
        if (data == null || data.isEmpty()) {{
            throw new IllegalArgumentException("Data cannot be empty");
        }}
        return true;
    }}
    
    public static void main(String[] args) {{
        Solution solution = new Solution();
        Map<String, Object> result = solution.process("sample data");
        System.out.println(result);
    }}
}}
```

```java
// SolutionTest.java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.util.Map;

public class SolutionTest {{
    private Solution solution;
    
    @BeforeEach
    void setUp() {{
        solution = new Solution();
    }}
    
    @Test
    void testProcess() {{
        Map<String, Object> result = solution.process("test data");
        assertEquals("success", result.get("status"));
        assertEquals("test data", result.get("data"));
        assertNotNull(result.get("timestamp"));
    }}
    
    @Test
    void testValidateInputValid() {{
        assertTrue(solution.validateInput("valid data"));
    }}
    
    @Test
    void testValidateInputEmpty() {{
        assertThrows(IllegalArgumentException.class, () -> {{
            solution.validateInput("");
        }});
    }}
}}
```

```xml
<!-- pom.xml -->
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <groupId>com.example</groupId>
    <artifactId>solution</artifactId>
    <version>1.0.0</version>
    
    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <junit.version>5.9.0</junit.version>
    </properties>
    
    <dependencies>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>${{junit.version}}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
```

## Installation
1. Compile: `mvn compile`
2. Run: `mvn exec:java -Dexec.mainClass="Solution"`
3. Test: `mvn test`
"""
    
    def _generate_general_solution(self, description):
        """Generate a general solution"""
        return f"""
# General Solution Generated by {self.agents[0].role}

## Analysis
Based on the requirements, here's a comprehensive solution approach:

### Recommended Technology Stack
- **Backend**: Python Flask or Node.js Express
- **Frontend**: React or Vue.js
- **Database**: PostgreSQL or MongoDB
- **Testing**: pytest/Jest for unit tests

### Implementation Plan
1. **Setup and Configuration**
   - Initialize project structure
   - Configure environment variables
   - Set up development dependencies

2. **Core Implementation**
   - Implement main business logic
   - Add input validation
   - Handle error cases

3. **Testing Strategy**
   - Unit tests for all functions
   - Integration tests for APIs
   - End-to-end testing

4. **Documentation**
   - API documentation
   - Setup instructions
   - Usage examples

### Code Structure
```
project/
├── src/
│   ├── main/           # Main application code
│   ├── utils/          # Utility functions
│   └── config/         # Configuration files
├── tests/              # Test files
├── docs/               # Documentation
└── README.md          # Project overview
```

This solution provides a solid foundation that can be extended based on specific requirements.
"""

# Initialize mock agents
router_agent = MockAgent(
    role="Technical Router & Project Manager",
    goal="Analyze incoming tickets and route them to appropriate specialists",
    backstory="Experienced technical project manager with deep expertise in solution architecture"
)

python_dev_agent = MockAgent(
    role="Senior Python Developer",
    goal="Create high-quality Python solutions with comprehensive testing",
    backstory="Senior Python developer with expertise in Django, Flask, FastAPI, and automation"
)

js_dev_agent = MockAgent(
    role="Senior JavaScript Developer", 
    goal="Build modern JavaScript/TypeScript applications and solutions",
    backstory="Senior JavaScript developer expert in React, Node.js, TypeScript, and modern web technologies"
)

java_dev_agent = MockAgent(
    role="Senior Java Developer",
    goal="Develop robust Java applications with enterprise-grade quality",
    backstory="Senior Java developer with expertise in Spring Boot, microservices, and enterprise applications"
)

qa_agent = MockAgent(
    role="Quality Assurance Engineer",
    goal="Ensure all code meets quality standards with comprehensive testing",
    backstory="Meticulous QA engineer who creates thorough test suites and ensures code quality"
)

# -------------------- Enhanced Ticket Processing --------------------

def get_pending_tickets():
    """Enhanced ticket fetching with comprehensive tracking"""
    if not jira:
        print("⚠️  No JIRA connection - returning demo tickets")
        return []
    
    try:
        # Use enhanced JQL query that catches more scenarios
        jql_query = enhanced_tracker.generate_jql()
        print(f"🔍 Using enhanced JQL: {jql_query}")
        
        tickets = jira.search_issues(jql_query, maxResults=50)
        
        # Filter tickets using smart processor
        pending_tickets = []
        for ticket in tickets:
            if smart_processor.should_process_ticket(ticket.key, ticket.raw):
                pending_tickets.append(ticket)
                print(f"✅ Queued for processing: {ticket.key}")
            else:
                print(f"⏭️  Skipping: {ticket.key} (already processed or not ready)")
        
        return pending_tickets
        
    except Exception as e:
        print(f"❌ Error fetching tickets: {e}")
        return []

def determine_complexity(title, description):
    """Determine solution complexity based on requirements"""
    text = (title + " " + description).lower()
    
    # High complexity indicators
    high_indicators = [
        'microservices', 'distributed', 'scalable', 'enterprise',
        'machine learning', 'ai', 'real-time', 'high-performance',
        'multi-tenant', 'blockchain', 'kubernetes'
    ]
    
    # Low complexity indicators
    low_indicators = [
        'simple', 'basic', 'small', 'quick', 'single',
        'utility', 'helper', 'convert', 'format'
    ]
    
    if any(indicator in text for indicator in high_indicators):
        return 'high'
    elif any(indicator in text for indicator in low_indicators):
        return 'low'
    else:
        return 'medium'

def get_file_type_description(filename):
    """Get human-readable description for file types"""
    descriptions = {
        'solution.py': 'Main Python implementation',
        'solution.js': 'Main JavaScript implementation', 
        'solution.java': 'Main Java implementation',
        'test_': 'Unit tests',
        'requirements.txt': 'Python dependencies',
        'package.json': 'Node.js dependencies and configuration',
        'pom.xml': 'Maven project configuration',
        'Dockerfile': 'Docker containerization setup',
        'README.md': 'Documentation and usage guide',
        'metadata.json': 'Solution metadata and analytics',
        '.env.example': 'Environment variables template',
        'config.': 'Configuration file'
    }
    
    for pattern, description in descriptions.items():
        if pattern in filename:
            return description
    
    # Default descriptions by extension
    ext = os.path.splitext(filename)[1].lower()
    ext_descriptions = {
        '.py': 'Python code',
        '.js': 'JavaScript code',
        '.java': 'Java code', 
        '.html': 'HTML template',
        '.css': 'Stylesheet',
        '.sql': 'Database script',
        '.json': 'Configuration data',
        '.yaml': 'Configuration file',
        '.md': 'Documentation'
    }
    
    return ext_descriptions.get(ext, 'Generated file')

def process_single_ticket(ticket):
    """Enhanced single ticket processing with comprehensive storage"""
    ticket_key = ticket.key
    
    try:
        # Mark as processing started
        smart_processor.mark_processing_start(ticket_key)
        
        # Extract ticket information
        title = ticket.fields.summary
        description = ticket.fields.description or "No description provided"
        
        # Detect language and domain
        detected_info = smart_processor.detect_language_and_domain(
            title + " " + description
        )
        
        print(f"🔄 Processing {ticket_key}: {title}")
        print(f"📊 Detected: {detected_info['language']} | {detected_info['domain']}")
        
        # Create appropriate task based on detected language
        start_time = time.time()
        language = detected_info['language'].lower()
        
        if language == 'python':
            agent = python_dev_agent
            task_description = f"""
            Develop a Python solution for: {title}
            
            Requirements: {description}
            
            Please provide:
            1. Complete Python code with proper structure
            2. Requirements.txt file
            3. Unit tests
            4. Documentation
            5. Usage examples
            """
        elif language == 'javascript':
            agent = js_dev_agent  
            task_description = f"""
            Develop a JavaScript/Node.js solution for: {title}
            
            Requirements: {description}
            
            Please provide:
            1. Complete JavaScript/TypeScript code
            2. Package.json configuration
            3. Test cases
            4. Documentation
            5. Usage examples
            """
        elif language == 'java':
            agent = java_dev_agent
            task_description = f"""
            Develop a Java solution for: {title}
            
            Requirements: {description}
            
            Please provide:
            1. Complete Java code with proper structure
            2. Maven/Gradle configuration
            3. JUnit tests
            4. Documentation  
            5. Usage examples
            """
        else:
            agent = router_agent
            task_description = f"""
            Analyze and provide a solution for: {title}
            
            Requirements: {description}
            
            Please:
            1. Determine the best technology approach
            2. Create a complete solution
            3. Include tests and documentation
            4. Provide implementation guidance
            """
        
        # Create and execute task
        task = MockTask(
            description=task_description,
            agent=agent,
            expected_output="Complete solution with code, tests, and documentation"
        )
        
        # Create crew and execute
        crew = MockCrew(
            agents=[agent, qa_agent],
            tasks=[task],
            verbose=True
        )
        
        result = crew.kickoff()
        processing_time = time.time() - start_time
        
        # ENHANCED: Store the complete solution with organized file structure
        solution_data = {
            'content': str(result),
            'language': detected_info['language'],
            'domain': detected_info['domain'],
            'title': title,
            'description': description,
            'agent': agent.role,
            'processing_time': processing_time,
            'tags': [
                detected_info['language'].lower(), 
                detected_info['domain'].lower().replace(' ', '_'), 
                'ai-generated',
                'crewai-solution'
            ],
            'complexity': determine_complexity(title, description),
            'ticket_priority': getattr(ticket.fields, 'priority', {}).get('name', 'Medium') if hasattr(ticket.fields, 'priority') else 'Medium'
        }
        
        # Store solution with organized file structure
        print("💾 Storing solution...")
        storage_result = code_storage.store_solution(ticket_key, solution_data)
        
        # Mark as successfully completed
        smart_processor.mark_processing_complete(
            ticket_key, 
            str(result),
            detected_info
        )
        
        # Enhanced JIRA comment with storage info and file links
        comment = f"""
✅ **Automated Processing Complete**

**Solution Details:**
- **Language Detected:** {detected_info['language']}
- **Domain:** {detected_info['domain']}
- **Processing Agent:** {agent.role}
- **Processing Time:** {processing_time:.2f}s

**📁 Solution Storage:**
- **Solution ID:** `{storage_result['solution_id']}`
- **Files Generated:** {len(storage_result['files'])}
- **Storage Path:** `{storage_result['storage_path']}`

**📂 Generated Files:**
"""
        
        # Add file list to comment
        for file_type, file_path in storage_result['files'].items():
            filename = os.path.basename(file_path)
            comment += f"- **{filename}** - {get_file_type_description(filename)}\n"
        
        comment += f"""

**🔍 Quick Access Commands:**
```bash
# View all files
ls -la "{storage_result['storage_path']}"

# View main solution
cat "{storage_result['storage_path']}/solution.*"

# View README
cat "{storage_result['storage_path']}/README.md"
```

**🔎 Search & Reuse:**
- Search similar solutions: `python manage_solutions.py search --language {detected_info['language']}`
- View solution details: `python manage_solutions.py get {storage_result['solution_id']}`

**Solution Preview:**
```
{str(result)[:800]}{'...' if len(str(result)) > 800 else ''}
```

---
*Processed by Enhanced CrewAI Pipeline with Comprehensive Storage*
*Reusable components available in organized file structure*
        """
        
        if jira:
            jira.add_comment(ticket, comment)
            
            # Transition ticket to done (adjust status as needed)
            try:
                transitions = jira.transitions(ticket)
                done_transition = next((t for t in transitions if 'done' in t['name'].lower()), None)
                if done_transition:
                    jira.transition_issue(ticket, done_transition['id'])
                    print(f"✅ Transitioned {ticket_key} to Done")
            except Exception as e:
                print(f"⚠️  Could not transition {ticket_key}: {e}")
        
        print(f"✅ Solution stored with ID: {storage_result['solution_id']}")
        print(f"📁 Files created: {len(storage_result['files'])}")
        print(f"🔗 Access path: {storage_result['storage_path']}")
        
        return {
            "success": True, 
            "ticket": ticket_key, 
            "result": str(result),
            "storage": storage_result,
            "processing_time": processing_time
        }
        
    except Exception as e:
        # Mark as failed (will be retried later)
        smart_processor.mark_processing_failed(
            ticket_key, 
            str(e),
            detected_info if 'detected_info' in locals() else {}
        )
        print(f"❌ Error processing {ticket_key}: {e}")
        return {"success": False, "ticket": ticket_key, "error": str(e)}

def main_processing_loop():
    """Enhanced main loop with comprehensive statistics"""
    cycle_count = 0
    
    print("🚀 Starting Enhanced Pipeline with Comprehensive Tracking")
    print("=" * 70)
    
    while True:
        try:
            cycle_count += 1
            print(f"\n🔄 Processing Cycle #{cycle_count} - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            
            # Get pending tickets using enhanced detection
            pending_tickets = get_pending_tickets()
            
            if not pending_tickets:
                print("✅ No tickets to process")
            else:
                print(f"📋 Found {len(pending_tickets)} tickets to process")
                
                # Process each ticket
                results = []
                for ticket in pending_tickets:
                    result = process_single_ticket(ticket)
                    results.append(result)
                    time.sleep(2)  # Prevent API rate limiting
                
                # Generate processing summary
                successful = [r for r in results if r['success']]
                failed = [r for r in results if not r['success']]
                
                print(f"\n📊 Cycle Results:")
                print(f"   ✅ Successful: {len(successful)}")
                print(f"   ❌ Failed: {len(failed)}")
                
                if failed:
                    print("   Failed tickets:")
                    for f in failed:
                        print(f"      - {f['ticket']}: {f['error']}")
                
                # Show storage statistics for successful tickets
                if successful:
                    total_files = sum(len(r.get('storage', {}).get('files', {})) for r in successful)
                    print(f"   💾 Files generated: {total_files}")
            
            # Get and display comprehensive statistics
            stats = enhanced_tracker.get_statistics()
            print(f"\n📈 Pipeline Statistics:")
            print(f"   Total tracked: {stats['total_tickets']}")
            print(f"   Completed: {stats['completed']}")
            print(f"   Failed: {stats['failed']}")
            print(f"   Retry candidates: {stats['retry_candidates']}")
            
            if stats['by_language']:
                print(f"   By language: {dict(stats['by_language'])}")
            
            # Check for retry candidates
            if stats['retry_candidates'] > 0:
                print(f"⚠️  {stats['retry_candidates']} tickets ready for retry")
            
            print(f"\n⏳ Waiting {POLL_INTERVAL} seconds before next cycle...")
            time.sleep(POLL_INTERVAL)
            
        except KeyboardInterrupt:
            print("\n🛑 Pipeline stopped by user")
            break
        except Exception as e:
            print(f"❌ Error in main loop: {e}")
            time.sleep(30)  # Wait before retrying

def show_pipeline_status():
    """Show current pipeline status"""
    stats = enhanced_tracker.get_statistics()
    print("\n📊 Enhanced Pipeline Status:")
    print(f"   Total tickets tracked: {stats['total_tickets']}")
    print(f"   Successfully completed: {stats['completed']}")
    print(f"   Failed (will retry): {stats['failed']}")
    print(f"   Currently processing: {stats['processing']}")
    print(f"   Ready for retry: {stats['retry_candidates']}")
    
    if stats['by_language']:
        print("\n📈 Breakdown by Language:")
        for lang, count in stats['by_language'].items():
            print(f"   {lang}: {count}")
    
    if stats['by_domain']:
        print("\n🏷️  Breakdown by Domain:")
        for domain, count in stats['by_domain'].items():
            print(f"   {domain}: {count}")

def test_mode():
    """Run in test mode without JIRA"""
    print("🧪 Running in Test Mode")
    print("=" * 30)
    
    # Test enhanced tracking functionality
    print("\n🔧 Testing Enhanced Tracking:")
    
    # Test JQL generation
    jql = enhanced_tracker.generate_jql()
    print(f"✅ JQL: {jql}")
    
    # Test language detection
    test_text = "Create a Python Flask web application with JWT authentication"
    detected = smart_processor.detect_language_and_domain(test_text)
    print(f"✅ Language Detection: {detected}")
    
    # Test statistics
    stats = enhanced_tracker.get_statistics()
    print(f"✅ Statistics: {stats}")
    
    # Test storage system
    storage_stats = code_storage.get_storage_stats()
    print(f"✅ Storage Stats: {storage_stats}")
    
    print("\n✅ Test mode complete!")

if __name__ == "__main__":
    if not jira:
        print("⚠️  No JIRA connection - running in test mode")
        test_mode()
    else:
        # Show initial status
        show_pipeline_status()
        
        # Start main processing loop
        main_processing_loop()
